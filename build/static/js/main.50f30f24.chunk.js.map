{"version":3,"sources":["Components/Loader.jsx","languages.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","name","value","App","useState","navigator","language","split","preferredLang","setPreferredLang","wiki","setWiki","isLoading","setIsLoading","reqURL","useEffect","a","fetch","req","json","res","parse","text","fetchWiki","handleClick","languages","length","map","i","id","key","disabled","onClick","bind","Loader","dangerouslySetInnerHTML","__html","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kPAQeA,MANf,WACI,OACI,yBAAKC,UAAU,oBCJR,GACX,CACIC,KAAM,UACNC,MAAO,MAEX,CACID,KAAM,cACNC,MAAO,MAEX,CACID,KAAM,UACNC,MAAO,MAEX,CACID,KAAM,WACNC,MAAO,MAEX,CACID,KAAM,aACNC,MAAO,MAEX,CACID,KAAM,qBACNC,MAAO,OAEX,CACID,KAAM,aACNC,MAAO,MAEX,CACID,KAAM,eACNC,MAAO,MAEX,CACID,KAAM,wCACNC,MAAO,MAEX,CACID,KAAM,QACNC,MAAO,QCcAC,MAjDf,WAAgB,IAAD,EAC6BC,mBAASC,UAAUC,SAASC,MAAM,KAAK,IADpE,mBACNC,EADM,KACSC,EADT,OAEWL,mBAAS,IAFpB,mBAENM,EAFM,KAEAC,EAFA,OAGqBP,oBAAS,GAH9B,mBAGNQ,EAHM,KAGKC,EAHL,KAKPC,EAAM,kBAAcN,EAAd,sHAEZO,qBAAU,YACO,uCAAG,8BAAAC,EAAA,sEACEC,MAAMH,GADR,cACVI,EADU,gBAEEA,EAAIC,OAFN,OAEVC,EAFU,OAGhBT,EAAQS,EAAIC,MAAMC,KAAK,MACvBT,GAAa,GAJG,2CAAH,qDAMfU,MAGF,IAAMC,EAAc,SAACtB,GACnBO,EAAiBP,GACjBW,GAAa,IAIf,OACE,yBAAKb,UAAU,OACb,4BAAQA,UAAU,cAChB,2DACA,+DAEF,yBAAKA,UAAU,YACZyB,EAAUC,OAAS,GAAKD,EAAUE,KAAI,WAAkBC,GAAlB,IAAG3B,EAAH,EAAGA,KAAMC,EAAT,EAASA,MAAT,OACrC,4BACE2B,GAAI5B,EACJ6B,IAAKF,EACL5B,UAAS,mBAAcQ,IAAkBN,EAAQ,WAAa,IAC9D6B,SAAUvB,IAAkBN,EAC5B8B,QAASR,EAAYS,KAAK,KAAM/B,IAC/BD,OAIP,yBAAKD,UAAU,gBACZY,EAAY,kBAACsB,EAAD,MAAa,KAC1B,yBAAKlC,UAAU,YAAYmC,wBAA0BvB,EAA+B,KAAnB,CAAEwB,OAAQ1B,QCnC/D2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBzC,WACrBA,UAAU0C,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.50f30f24.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Loading() {\n    return (\n        <div className=\"loading-circle\"></div>\n    );\n}\n\nexport default Loading;","export default [\n    {\n        name: 'english',\n        value: 'en'\n    },\n    {\n        name: 'français',\n        value: 'fr'\n    },\n    {\n        name: 'deutsch',\n        value: 'de'\n    },\n    {\n        name: 'italiano',\n        value: 'it'\n    },\n    {\n        name: 'español',\n        value: 'es'\n    },\n    {\n        name: 'plattdüütsch',\n        value: 'nds'\n    },\n    {\n        name: 'nederlands',\n        value: 'nl'\n    },\n    {\n        name: 'türkçe',\n        value: 'tr'\n    },\n    {\n        name: 'pусский',\n        value: 'ru'\n    },\n    {\n        name: 'hindi',\n        value: 'hif'\n    }\n]","import React, { useState, useEffect } from 'react';\nimport Loader from './Components/Loader';\nimport languages from './languages.js';\n\nfunction App() {\n  const [preferredLang, setPreferredLang] = useState(navigator.language.split('-')[0]);\n  const [wiki, setWiki] = useState('');\n  const [isLoading, setIsLoading] = useState(true)\n\n  const reqURL = `https://${preferredLang}.wikipedia.org/w/api.php?action=parse&format=json&page=Albert_Einstein&prop=text%7Cimages&formatversion=1&origin=*`;\n\n  useEffect(() => {\n    const fetchWiki = async () => {\n      const req = await fetch(reqURL);\n      const res = await req.json();\n      setWiki(res.parse.text['*']);\n      setIsLoading(false);\n    }\n    fetchWiki();\n  })\n\n  const handleClick = (value) => {\n    setPreferredLang(value);\n    setIsLoading(true);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2>Welcome to Wikipedia viewer</h2>\n        <h4>Choose your preferred language</h4>\n      </header>\n      <div className=\"App-btns\">\n        {languages.length > 0 && languages.map(({ name, value }, i) =>\n          <button\n            id={name}\n            key={i}\n            className={`wiki-btn ${preferredLang === value ? 'selected' : ''}`}\n            disabled={preferredLang === value}\n            onClick={handleClick.bind(null, value)}>\n            {name}\n          </button>\n        )}\n      </div>\n      <div className=\"wiki-wrapper\">\n        {isLoading ? <Loader /> : null}\n        <div className=\"wiki-view\" dangerouslySetInnerHTML={!isLoading ? { __html: wiki } : null}></div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}